<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprArmRevolver</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Depth
depth = -2

//Tip of gun location from origin
tipOfGunx = 30;
tipOfGuny = -3;

//Shoulder coords
shoulderCordx = 0;
shoulderCordy = 0;

//image speed for animations
idleSpd = 0.02;
runningSpd = 0.16;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Point arm toward mouse
image_angle = point_direction(x, y, mouse_x, mouse_y);

//Keep Jakobs arm at shoulder

//Sets shoulder location based on current animation/sprite
switch (objJakobs.sprite_index) {
    case sprJakobsIdle:
        shoulderCordx = 8;
        shoulderCordy = -12;
        objJakobs.image_speed = idleSpd;
        break;
    case sprJakobsRunning:
        shoulderCordx = 10;
        shoulderCordy = -6;
        objJakobs.image_speed = runningSpd;
        break;
}

x = objJakobs.x + (objJakobs.image_xscale * shoulderCordx);
y = objJakobs.y + (objJakobs.image_yscale * shoulderCordy);

//Match Jakobs orientation and size
if (objJakobs.image_xscale &gt; 0) {
    image_xscale = objJakobs.image_xscale;
    image_yscale = objJakobs.image_yscale;
}
if (objJakobs.image_xscale &lt; 0) {
    image_xscale = -objJakobs.image_xscale;
    image_yscale = -objJakobs.image_yscale;
}

objJakobs.cooldown--;
//Regular
if (mouse_check_button(mb_left) &amp;&amp; objJakobs.cooldown &lt;= 0) {
    instance_create(x, y, objBullet);
    objJakobs.cooldown = objJakobs.regDelay;
    sprite_index = sprArmRevolver;
}

//Melee
if (mouse_check_button(mb_right) &amp;&amp; objJakobs.cooldown &lt;= 0) {
    instance_create(x + (image_xscale * 16), y, objStrike);
    objJakobs.cooldown = objJakobs.strikeDelay;
    sprite_index = sprArmSword;
}

//Heavy
if (mouse_check_button(mb_middle) &amp;&amp; objJakobs.cooldown &lt;= 0) {
    instance_create(x, y, objRocket);
    objJakobs.cooldown = objJakobs.heavyDelay;
    sprite_index = sprArmRocketLauncher;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
